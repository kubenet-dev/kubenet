apiVersion: choreo.kform.dev/v1alpha1
kind: Library
metadata:
  creationTimestamp: "2024-09-08T13:10:06Z"
  managedFields:
  - apiVersion: choreo.kform.dev/v1alpha1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:code: {}
        f:type: {}
      f:status: {}
    manager: inputfileloader
    operation: Apply
    time: "2024-09-08T13:10:06Z"
  name: device.network.kubenet.dev.networkinstances.star
  resourceVersion: "0"
  uid: 66a0ea51-30fa-48b4-92eb-1a4987c78485
spec:
  code: |-
    load("id.kuid.dev.ids.star", "getNodeKeys")

    def getSpec(self):
      return self.get("spec", {})

    def getPartition(self):
      spec = getSpec(self)
      return spec.get("partition", "")

    def getRegion(self):
      spec = getSpec(self)
      return spec.get("region", "")

    def getSite(self):
      spec = getSpec(self)
      return spec.get("site", "")

    def getNode(self):
      spec = getSpec(self)
      return spec.get("node", "")

    def getNodeID(self):
      nodeKeys = getNodeKeys()
      spec = getSpec(self)
      nodeID = {}
      for key, val in spec.items():
        if key in nodeKeys:
          nodeID[key] = val
      return nodeID

    def setInterfaces(self, interfaces):
      spec = getSpec(self)
      spec["interfaces"] = interfaces

    def getNetworkInstance(name, namespace, spec):
      return {
        "apiVersion": "device.network.kubenet.dev/v1alpha1",
        "kind": "NetworkInstance",
        "metadata": {
          "name": name,
          "namespace": namespace
        },
        "spec": spec
      }
  type: starlark
status: {}
