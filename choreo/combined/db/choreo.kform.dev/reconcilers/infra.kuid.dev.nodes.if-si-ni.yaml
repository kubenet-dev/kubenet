apiVersion: choreo.kform.dev/v1alpha1
kind: Reconciler
metadata:
  creationTimestamp: "2024-09-08T13:10:06Z"
  managedFields:
  - apiVersion: choreo.kform.dev/v1alpha1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:code:
          f:reconciler.star: {}
        f:for:
          f:group: {}
          f:kind: {}
          f:selector: {}
          f:version: {}
        f:owns: {}
        f:type: {}
        f:watches: {}
      f:status: {}
    manager: inputfileloader
    operation: Apply
    time: "2024-09-08T13:10:06Z"
  name: infra.kuid.dev.nodes.if-si-ni
  resourceVersion: "0"
  uid: 897c6af3-4f64-41d9-aa90-5ed2594d6ae3
spec:
  code:
    reconciler.star: "load(\"api.k8s.io.object.star\", \"getName\", \"getNamespace\",
      \"getDeletionTimestamp\", \"delFinalizer\", \"setFinalizer\")\nload(\"core.network.kubenet.dev.networkdesigns.star\",
      \"getNetworkDesign\", \"isItfceNumbered\")\nload(\"infra.kuid.dev.nodes.star\",
      \"getPartition\", \"getNodeID\")\nload(\"id.kuid.dev.ids.star\", \"getEndpointID\",
      \"genEndpointIDString\")\nload(\"device.network.kubenet.dev.interfaces.star\",
      \"getInterfaceSpec\", \"getInterface\")\nload(\"device.network.kubenet.dev.subinterfaces.star\",
      \"getSubInterface\")\nload(\"device.network.kubenet.dev.networkinstances.star\",
      getniNetworkInstance=\"getNetworkInstance\")\nload(\"ipam.be.kuid.dev.ipclaims.star\",
      \"getIPClaimedAddress\")\n\nfinalizer = \"node.infra.kuid.dev/itfce\"\nconditionType
      = \"InterfaceReady\"\n\ndef reconcile(self):\n  namespace = getNamespace(self)\n
      \ partition = getPartition(self)\n\n  if getDeletionTimestamp(self) != None:\n
      \   rsp = client_delete()\n    if rsp[\"error\"] != None:\n      return reconcile_result(self,
      True, 0, conditionType, rsp[\"error\"], rsp[\"fatal\"])\n    \n    delFinalizer(self,
      finalizer)\n    return reconcile_result(self, False, 0, conditionType, \"\",
      False)\n\n  setFinalizer(self, finalizer)\n\n  if is_conditionready(self, \"IPClaimReady\")
      != True:\n    return reconcile_result(self, True, 0, conditionType, \"ip claim
      not ready\", False)\n\n  networkDesign, err = getNetworkDesign(partition, namespace)\n
      \ if err != None:\n    return reconcile_result(self, False, 0, conditionType,
      err, False)\n\n  interfaces = getInterfaces(self)\n  for itfce in interfaces:\n
      \   rsp = client_create(itfce)\n    if rsp[\"error\"] != None:\n      return
      reconcile_result(self, True, 0, conditionType, rsp[\"error\"], rsp[\"fatal\"])\n
      \ \n  subInterfaces, err = getSubInterfaces(self, networkDesign)\n  if err !=
      None:\n    return reconcile_result(self, True, 0, conditionType, err, False)\n
      \ for subItfce in subInterfaces:\n    rsp = client_create(subItfce)\n    if
      rsp[\"error\"] != None:\n      return reconcile_result(self, True, 0, conditionType,
      rsp[\"error\"], rsp[\"fatal\"]) \n  \n  ni = getNetworkInstance(self)\n  rsp
      = client_create(ni)\n  if rsp[\"error\"] != None:\n    return reconcile_result(self,
      True, 0, conditionType, rsp[\"error\"], rsp[\"fatal\"]) \n  \n  rsp = client_apply()\n
      \ if rsp[\"error\"] != None:\n    return reconcile_result(self, True, 0, conditionType,
      rsp[\"error\"], rsp[\"fatal\"])\n  return reconcile_result(self, False, 0, conditionType,
      \"\", False)\n\ndef getInterfaces(self):\n  nodeID = getNodeID(self)\n  namespace
      = getNamespace(self)\n\n  interfaces = []\n  systemEPID = getEndpointID(nodeID,
      0, 0, \"system\")\n  systemEPName = genEndpointIDString(systemEPID)\n  systemSpec
      = getInterfaceSpec(systemEPID)   \n  interfaces.append(getInterface(systemEPName,
      namespace, systemSpec))   \n\n  irbEPID = getEndpointID(nodeID, 0, 0, \"irb\")\n
      \ irbEPName = genEndpointIDString(irbEPID)\n  irbSpec = getInterfaceSpec(irbEPID)
      \     \n  interfaces.append(getInterface(irbEPName, namespace, irbSpec))   \n
      \ \n  ## todo vxlan or other\n  return interfaces\n\n\ndef getSubInterfaces(self,
      networkDesign):\n  nodeID = getNodeID(self)\n  nodeName = getName(self)\n  namespace
      = getNamespace(self)\n\n  subinterfaces = []\n\n  ipv4, err = getAddressesPerAF(nodeName,
      namespace, networkDesign, \"ipv4\")\n  if err != None:\n    return None, err\n
      \ ipv6, err = getAddressesPerAF(nodeName, namespace, networkDesign, \"ipv6\")\n
      \ if err != None:\n    return None, err\n\n  id = 0\n  epID = getEndpointID(nodeID,
      0, 0, \"system\")\n  siName = genEndpointIDString(epID) + \".\" + str(id)\n\n
      \ spec = {}\n  for key, val in epID.items():\n    if key == \"port\" or key
      == \"endpoint\":\n      spec[key] = int(val)\n    else:\n      spec[key] = val\n
      \ spec[\"type\"] = \"routed\"\n  spec[\"id\"] = id\n  spec[\"ipv4\"] = ipv4\n
      \ spec[\"ipv6\"] = ipv6\n  \n  subinterfaces.append(getSubInterface(siName,
      namespace, spec))\n  return subinterfaces, None\n\ndef getAddressesPerAF(nodeName,
      namespace, networkDesign, af):\n  afaddrs = None\n  if isItfceNumbered(networkDesign,
      \"loopback\", af):\n    ipClaimName = nodeName + \".\" + af\n    address, err
      = getIPClaimedAddress(ipClaimName, namespace) \n    if err != None:\n      return
      None, err\n    \n    afaddrs = {}\n    afaddrs[\"addresses\"] = []\n    afaddrs[\"addresses\"].append(address)\n
      \ return afaddrs, None\n\ndef getNetworkInstance(self):\n  nodeName = getName(self)\n
      \ namespace = getNamespace(self)\n  nodeID = getNodeID(self)\n\n  niShortName
      = \"default\"\n  niName = nodeName + \".\" + niShortName\n\n  spec = {}\n  for
      key, val in nodeID.items():\n    spec[key] = val\n  spec[\"id\"] = 0\n  spec[\"type\"]
      = niShortName\n  spec[\"name\"] = niShortName\n\n  return getniNetworkInstance(niName,
      namespace, spec)\n  \n"
  for:
    group: infra.kuid.dev
    kind: Node
    selector:
      match:
        status.conditions.exists(c, c.type == 'IPClaimReady' && c.status == 'True'): "true"
    version: v1alpha1
  owns:
  - group: device.network.kubenet.dev
    kind: Interface
    version: v1alpha1
  - group: device.network.kubenet.dev
    kind: SubInterface
    version: v1alpha1
  - group: device.network.kubenet.dev
    kind: NetworkInstance
    version: v1alpha1
  type: starlark
  watches:
  - group: core.network.kubenet.dev
    kind: NetworkDesign
    selector:
      match:
        metadata.name: spec.partition
        status.conditions.exists(c, c.type == 'Ready' && c.status == 'True'): "true"
    version: v1alpha1
status: {}
